{"version":3,"sources":["components/barChart.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","state","dataBar","labels","datasets","label","data","props","resultingValues","backgroundColor","borderWidth","borderColor","barChartOptions","legend","display","responsive","maintainAspectRatio","scales","xAxes","barPercentage","gridLines","color","yAxes","ticks","beginAtZero","className","this","options","React","Component","App","tokenizer","require","useState","showResult","toggleShowResult","textInput","setTextInput","resultList","setResultList","isLoading","setIsLoading","submitButtonClick","event","a","evaluateInput","input","tf","model","words","split","inputData","Array","wordIndex","length","i","prediction","predict","values","dataSync","arr","from","result","map","x","console","log","Fade","in","timeout","Form","Control","as","rows","placeholder","onChange","e","target","value","Button","variant","style","margin","onClick","Spinner","animation","size","role","aria-hidden","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+xxIAoEiBA,E,4MA/DbC,MAAQ,CACNC,QAAS,CACPC,OAAQ,CAAC,SAAU,cAAe,WAClCC,SAAU,CACR,CACEC,MAAO,GACPC,KAAM,EAAKC,MAAMC,gBACjBC,gBAAiB,CACf,yBACA,0BACA,2BAEFC,YAAa,EACbC,YAAa,CACX,yBACA,yBACA,6BAKRC,gBAAiB,CACfC,OAAQ,CACNC,SAAS,GAEXC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACL,CACEC,cAAe,EACfC,UAAW,CACTN,SAAS,EACTO,MAAO,wBAIbC,MAAO,CACL,CACEF,UAAW,CACTN,SAAS,EACTO,MAAO,sBAETE,MAAO,CACLC,aAAa,Q,uDAUvB,OACE,kBAAC,IAAD,KACE,wBAAIC,UAAU,QAAd,kCACA,kBAAC,MAAD,CAAKnB,KAAMoB,KAAKzB,MAAMC,QAASyB,QAASD,KAAKzB,MAAMW,uB,GA1DtCgB,IAAMC,W,SCqGdC,MAjGf,WACE,IAAMC,EAAYC,EAAQ,KADb,EAE0BC,oBAAS,GAFnC,mBAENC,EAFM,KAEMC,EAFN,OAGqBF,mBAAS,IAH9B,mBAGNG,EAHM,KAGKC,EAHL,OAIuBJ,mBAAS,CAAC,EAAE,EAAE,IAJrC,mBAINK,EAJM,KAIMC,EAJN,OAKqBN,oBAAS,GAL9B,mBAKNO,EALM,KAKKC,EALL,KAqBPC,EAAiB,uCAAG,WAAeC,GAAf,SAAAC,EAAA,6DACxBH,GAAa,GADW,KAExBF,EAFwB,SAEJM,EAAcT,GAFV,kCAGxBD,GAAiB,GACjBM,GAAa,GAJW,2CAAH,sDAejBI,EAAa,uCAAG,WAAeC,GAAf,+BAAAF,EAAA,sEACAG,IAAmB,oBADnB,OAoBpB,IAnBMC,EADc,OAiBhBC,EAAQH,EAAMI,MAAM,KACpBC,EAAY,IAAIC,MAAM,KACtBC,EAAYJ,EAAMK,OAAS,EACvBC,EAAI,IAAKA,GAAK,EAAGA,IAEjBJ,EAAUI,GADXF,GAAa,EACGtB,EAAUkB,EAAMI,MAEhB,EAxBH,OA4BdG,EAAaR,EAAMS,QAAQV,IAAY,CAACI,GAAY,CAAC,EAAG,OACxDO,EAASF,EAAWG,WACpBC,EAAMR,MAAMS,KAAKH,GAGjBI,EAASF,EAAIG,KAAI,SAAAC,GAAC,OAAM,IAAFA,KAG5BC,QAAQC,IAAIN,GApCQ,kBAqCbE,GArCa,4CAAH,sDAwCnB,OACE,yBAAKrC,UAAU,OACb,kBAAC0C,EAAA,EAAD,CAAMC,IAAKlC,EAAYmC,QAAS,KAC9B,yBAAK5C,UAAWS,EAAa,SAAW,gBACtC,wBAAIT,UAAU,QAAd,mBACA,kBAAC6C,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,QAAN,CAAcC,GAAG,WAAWC,KAAK,IAAIC,YAAY,6BAA6BC,SAtDnE,SAAAC,GACnBvC,EAAauC,EAAEC,OAAOC,WAuDhB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,eAAeC,MAAO,CAACC,OAAQ,IAAKC,QAASzC,GAAqBF,EAAuB,kBAAC4C,EAAA,EAAD,CAASZ,GAAG,OAAOa,UAAU,SAASC,KAAK,KAAKC,KAAK,SAASC,cAAY,SAArF,YAGlG,kBAACrB,EAAA,EAAD,CAAMC,GAAIlC,EAAYmC,QAAS,KAC7B,yBAAK5C,UAAWS,EAAa,gBAAkB,UAC5CA,EAAa,kBAAC,EAAD,CAAU1B,gBAAiB8B,IAAiB,KACzDJ,EAAa,kBAAC6C,EAAA,EAAD,CAAQC,QAAQ,eAAeC,MAAO,CAACC,OAAQ,IAAKC,QAAS,kBAAMhD,GAAkBD,KAA2BM,EAAUiD,YAAuB,SCtFrJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.0b85bea2.chunk.js","sourcesContent":["import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\n\nclass BarChart extends React.Component {\n    state = {\n      dataBar: {\n        labels: [\"Reddit\", \"Hacker News\", \"Youtube\"],\n        datasets: [\n          {\n            label: \"\",\n            data: this.props.resultingValues,\n            backgroundColor: [\n              \"rgba(255, 134,159,0.4)\",\n              \"rgba(98,  182, 239,0.4)\",\n              \"rgba(255, 218, 128,0.4)\",\n            ],\n            borderWidth: 2,\n            borderColor: [\n              \"rgba(255, 134, 159, 1)\",\n              \"rgba(98,  182, 239, 1)\",\n              \"rgba(255, 218, 128, 1)\",\n            ]\n          }\n        ]\n      },\n      barChartOptions: {\n        legend: {\n          display: false\n        },\n        responsive: true,\n        maintainAspectRatio: true,\n        scales: {\n          xAxes: [\n            {\n              barPercentage: 1,\n              gridLines: {\n                display: true,\n                color: \"rgba(0, 0, 0, 0.1)\"\n              }\n            }\n          ],\n          yAxes: [\n            {\n              gridLines: {\n                display: true,\n                color: \"rgba(0, 0, 0, 0.1)\"\n              },\n              ticks: {\n                beginAtZero: true\n              }\n            }\n          ]\n        }\n      }\n    }\n  \n  \n    render() {\n      return (\n        <MDBContainer>\n          <h3 className=\"mt-5\">Where does your comment match?</h3>\n          <Bar data={this.state.dataBar} options={this.state.barChartOptions} />\n        </MDBContainer>\n      );\n    }\n  }\n  \n  export default BarChart;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, Fade, Form, Spinner } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BarChart from './components/barChart.js';\nimport * as tf from '@tensorflow/tfjs';\n\n\nfunction App() {\n  const tokenizer = require('./tokenizer.json');\n  const [showResult, toggleShowResult] = useState(false);\n  const [textInput, setTextInput] = useState(\"\");\n  const [resultList, setResultList] = useState([0,0,0]);\n  const [isLoading, setIsLoading] = useState(false);\n  //const [model, setModel] = useState();\n/*   useEffect(() => {\n    async function fetchModel(){\n      const model = await tf.loadLayersModel('model/model.json');\n      setModel(cls);\n      console.log(\"loaded\");\n    }\n    fetchModel();\n    \n    console.log(\"Loading AI...\")\n  },[]); */\n\n\n\n\n  const submitButtonClick = async function(event) {\n    setIsLoading(true);\n    setResultList(await evaluateInput(textInput));\n    toggleShowResult(true);\n    setIsLoading(false);\n  }\n\n  const handleChange = e => {\n    setTextInput(e.target.value);\n  }\n\n/*   const inputPreprocessing = input => {\n    \n  } */\n\n  const evaluateInput = async function(input) { //Sett inn AI her\n    const model = await tf.loadLayersModel('model/model.json');\n    /*const inputData = tf.tensor2d([[   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n      0,    0,    0,    1,    2,   10,  112,    1,   37,   67,  280,    4,  677,    5,\n    547,    9,   12, 1417,   11,  851, 1185,    8,   11,    3,  257,   89,   17,   39,\n      9,   12, 2834,   26, 7256,    6,    3,  969,   14,    3, 7256, 1185, 1301,   94,\n     52,   12,    2,  123,    5,  492,  190,  242,  501,  969,   30,    3, 7256,   11,\n      3,   53,    1,  467,    9,    3, 2095, 1345,  408,   12,  466,   31, 2095,  123,\n      9,   48, 2614,    7,   56, 1593,   14,    3, 2614,    8,  969,  366,   73,  358,\n      9,  480, 1801,    3,   91, 7483,    1,    2,   28,   87,  775,    3,   91,  386,\n      8, 3145,   22,    1,  311,  969,    7,   13,   10,   66,   56,    5,  120,  462,\n   6703,    1,    5, 3455,  756,    4,   37,  510,    1,   13,   10,   78,    4,  677,\n      3,  514,  408,    4,  239, 2095, 1345,    4, 1939,    3,    8,    3,    1, 1118,\n     63,    2, 3098,    6]], [1, 200]); */\n    var words = input.split(\" \");\n    var inputData = new Array(200);\n    var wordIndex = words.length - 1;\n    for(var i = 199; i >= 0; i--){\n        if(wordIndex >= 0){\n            inputData[i] = tokenizer[words[wordIndex--]];\n        }else{\n            inputData[i] = 0;\n        }\n    }\n\n    const prediction = model.predict(tf.tensor2d([inputData], [1, 200]));\n    const values = prediction.dataSync();\n    const arr = Array.from(values);\n\n    //gang verdiene med 100\n    const result = arr.map(x => x*100);\n\n    //returner verdier i form av liste\n    console.log(arr);\n    return result;\n  }\n\n  return (\n    <div className=\"App\">\n      <Fade in={!showResult} timeout={1000}>\n        <div className={showResult ? 'hidden' : 'InputSection'}>\n          <h3 className=\"mt-5\">Input a comment</h3>\n          <Form>\n            <Form.Control as=\"textarea\" rows=\"4\" placeholder='Write your comment here...' onChange={handleChange} />\n          </Form>\n          <Button variant=\"outline-dark\" style={{margin: 20}} onClick={submitButtonClick}>{!isLoading ? \"Submit\" : <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\"/>}</Button>\n        </div>\n      </Fade>\n      <Fade in={showResult} timeout={1000}>\n        <div className={showResult ? 'ResultSection' : 'hidden'}>\n          {showResult ? <BarChart resultingValues={resultList} /> : null}\n          {showResult ? <Button variant=\"outline-dark\" style={{margin: 20}} onClick={() => toggleShowResult(!showResult)}>{/*Try again*/isLoading.toString()}</Button> : null}\n        </div>\n      </Fade>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}